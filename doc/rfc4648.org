* RFC4648 memo

https://datatracker.ietf.org/doc/html/rfc4648

** Implementation Discrepancies (section 3)
   - Implementation *MUST NOT* add line feeds to base-encoded data unless stated.
   - Implementation *MUST* add pad characters at the end of encoded data (Exclude base16-encode).
   - When interpreting, implementation *MUST* reject the encoded data it contains non-alphabet characters for the security reason.
   - Pad bits *MUST* be set to zero.

** Base 64 Encoding (base64)
   The Base 64 Alphabet
#+begin_src
     Value Encoding  Value Encoding  Value Encoding  Value Encoding
         0 A            17 R            34 i            51 z
         1 B            18 S            35 j            52 0
         2 C            19 T            36 k            53 1
         3 D            20 U            37 l            54 2
         4 E            21 V            38 m            55 3
         5 F            22 W            39 n            56 4
         6 G            23 X            40 o            57 5
         7 H            24 Y            41 p            58 6
         8 I            25 Z            42 q            59 7
         9 J            26 a            43 r            60 8
        10 K            27 b            44 s            61 9
        11 L            28 c            45 t            62 +
        12 M            29 d            46 u            63 /
        13 N            30 e            47 v
        14 O            31 f            48 w         (pad) =
        15 P            32 g            49 x
        16 Q            33 h            50 y
#+end_src

   Process flow

   - Split the 24-bits input into 6-bits groups (if fewer than 24-bits, value zero are added on the right)
   - Convert each group into Base 64 Alphabet
   - If the number of the output alphabets is fewer than 4, the special character '=' is/are added on the right

   Output pattern
   
   1. The final quantum of encoding input is an integral multiple of 24 bits: No '=' padding (its length is an integral multiple of 4 chars)
   2. The final quantum of encoding input is exactly 8-bits: The last group will be two characters followed by two '=' padding
   3. The final quantum of encoding input is exactly 16-bits: The last group will be three characters followed by one '=' padding

** Base 64 Encoding with URL and Filename Safe Alphabet (base64url)
   The "URL and Filename safe" Base 64 Alphabet
#+begin_src
     Value Encoding  Value Encoding  Value Encoding  Value Encoding
         0 A            17 R            34 i            51 z
         1 B            18 S            35 j            52 0
         2 C            19 T            36 k            53 1
         3 D            20 U            37 l            54 2
         4 E            21 V            38 m            55 3
         5 F            22 W            39 n            56 4
         6 G            23 X            40 o            57 5
         7 H            24 Y            41 p            58 6
         8 I            25 Z            42 q            59 7
         9 J            26 a            43 r            60 8
        10 K            27 b            44 s            61 9
        11 L            28 c            45 t            62 - (minus)
        12 M            29 d            46 u            63 _ (underline)
        13 N            30 e            47 v
        14 O            31 f            48 w
        15 P            32 g            49 x
        16 Q            33 h            50 y         (pad) =
#+end_src

   Process flow

   Same as base64.

** Base 32 Encoding (base32)
   The Base 32 Alphabet
#+begin_src
     Value Encoding  Value Encoding  Value Encoding  Value Encoding
         0 A             9 J            18 S            27 3
         1 B            10 K            19 T            28 4
         2 C            11 L            20 U            29 5
         3 D            12 M            21 V            30 6
         4 E            13 N            22 W            31 7
         5 F            14 O            23 X
         6 G            15 P            24 Y         (pad) =
         7 H            16 Q            25 Z
         8 I            17 R            26 2
#+end_src
   
   Process flow

   - Split the 40-bits input into 5-bits groups (if fewer than 40-bits, value zero are added on the right)
   - Convert each group into Base 32 Alphabet
   - If the number of the output alphabets is fewer than 8, the special character '=' is/are added on the right

   Output pattern
   
   1. The final quantum of encoding input is an integral multiple of 40 bits: No '=' padding (its length is an integral multiple of 8 chars)
   2. The final quantum of encoding input is exactly 8-bits: The last group will be two characters followed by six '=' padding
   3. The final quantum of encoding input is exactly 16-bits: The last group will be four characters followed by four '=' padding
   4. The final quantum of encoding input is exactly 24-bits: The last group will be five characters followed by three '=' padding
   5. The final quantum of encoding input is exactly 32-bits: The last group will be seven characters followed by one '=' padding

** Base 32 Encoding with Extended Hex Alphabet (base32hex)
   The "Extended Hex" Base 32 Alphabet
#+begin_src
         Value Encoding  Value Encoding  Value Encoding  Value Encoding
             0 0             9 9            18 I            27 R
             1 1            10 A            19 J            28 S
             2 2            11 B            20 K            29 T
             3 3            12 C            21 L            30 U
             4 4            13 D            22 M            31 V
             5 5            14 E            23 N
             6 6            15 F            24 O         (pad) =
             7 7            16 G            25 P
             8 8            17 H            26 Q
#+end_src

   Process flow

   Same as base32.

** Base 16 Encoding (base16)
   The Base 16 Alphabet
#+begin_src
         Value Encoding  Value Encoding  Value Encoding  Value Encoding
             0 0             4 4             8 8            12 C
             1 1             5 5             9 9            13 D
             2 2             6 6            10 A            14 E
             3 3             7 7            11 B            15 F
#+end_src

   Process flow

   - Split the 8-bits input into 4-bits groups
   - Convert each group into Base 16 Alphabet
   
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
